{"version":3,"sources":["Navbar.js","TimelineItem.js","Timeline.js","Settings.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","searchClipboardHistory","console","log","shutDownApplication","axios","post","then","response","alert","data","success","rejected","_this2","this","react_default","a","createElement","className","href","title","onClick","type","placeholder","name","disabled","Component","TimelineItem","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","direction","text","clipboardItem","time","date","index","get","clipboard","setClipboard","Timeline","fetchClipboardHistory","setState","clipboardHistory","history","isLoaded","createTimelineItems","timelineItems","i","length","push","src_TimelineItem","Settings","App","src_Navbar_0","react_router_dom","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95c34d6c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Navbar.css';\nimport axios from \"axios\";\n\nclass Navbar extends Component {\n    searchClipboardHistory = () => {\n        console.log(\"Not yet implemented!\");\n    };\n\n    shutDownApplication = () => {\n        axios.post(\"http://localhost:8001/api/v1/shutdown\")\n            .then((response) => {\n                if (response) {\n                    alert(response.data.success);\n                }\n            }, (rejected) => {\n                console.log(rejected);\n            });\n    };\n\n    render() {\n        return (\n            <div className=\"topnav\">\n                <a href=\"/\" className=\"active left\"><i className=\"fa fa-history\"></i> Clipboard history</a>\n                <a title=\"Open settings\" href=\"/settings\">\n                    <i className=\"rotate-icon fa fa-cog\"></i>\n                </a>\n                <a title=\"Shutdown application\" href=\"#\" onClick={() => this.shutDownApplication()}>\n                    <i className=\"fa fa-power-off\"></i>\n                </a>\n                <div className=\"search-container\">\n                    <input type=\"text\" placeholder=\"Search history...\" name=\"search\" disabled/>\n                    <button type=\"button\" onClick={() => this.searchClipboardHistory()} disabled>\n                        <i className=\"fa fa-search\"></i>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Navbar;\n","import React, {Component} from 'react';\nimport axios from \"axios\";\n\nclass TimelineItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            direction: props.direction,\n            text: props.clipboardItem.text,\n            time: props.clipboardItem.time,\n            date: props.clipboardItem.date,\n            index: props.index\n        };\n    }\n\n    setClipboard(index) {\n        axios.get(\"http://localhost:8001/api/v1/history/\" + index)\n            .then((response) => {\n                if (response) {\n                    alert(\"Copied to clipboard: \" + response.data.clipboard);\n                }\n            }, (rejected) => {\n                console.log(rejected);\n            });\n    };\n\n    render() {\n        return (\n            <li>\n                <div className={this.state.direction}>\n                    <div className={\"flag-wrapper\"}>\n                        <span className={\"hexa\"}></span>\n                        <span className={\"time-wrapper\"}>\n                                <span className={\"time\"}>{this.state.time}</span>\n                            </span>\n                    </div>\n                    <div className={\"desc\"}\n                         onClick={() => this.setClipboard(this.state.index)}>\n                        <pre>{this.state.text}</pre>\n                    </div>\n                </div>\n            </li>\n        );\n    }\n}\n\nexport default TimelineItem;\n","import React, {Component} from 'react';\nimport './Timeline.css';\nimport TimelineItem from './TimelineItem';\nimport axios from 'axios';\n\nclass Timeline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            clipboardHistory: [],\n            isLoaded: false\n        };\n    }\n\n    componentDidMount() {\n        this.fetchClipboardHistory();\n    }\n\n    fetchClipboardHistory = () => {\n        axios.get(\"http://localhost:8001/api/v1/history\")\n            .then((response) => {\n                this.setState({clipboardHistory: []});\n                if (response) {\n                    this.setState({\n                        clipboardHistory: response.data.history,\n                        isLoaded: true\n                    });\n                }\n            }, (rejected) => {\n                console.log(rejected);\n                this.setState({isLoaded: false});\n            });\n    };\n\n    createTimelineItems = () => {\n        let timelineItems = [];\n\n        let direction = \"direction-r\";\n\n        for (let i = 0; i < this.state.clipboardHistory.length; i++) {\n            timelineItems.push(<TimelineItem index={i} direction={direction}\n                                             clipboardItem={this.state.clipboardHistory[i]}/>);\n\n            direction = direction === \"direction-r\" ? \"direction-l\" : \"direction-r\";\n        }\n\n        return timelineItems;\n    };\n\n    render() {\n        if (this.state.isLoaded) {\n            return (\n                <ul className={\"timeline\"}>\n                    {this.createTimelineItems()}\n                </ul>\n            );\n        }\n        return (\n            <header>\n                <h1>Error could not load clipboard history</h1>\n            </header>\n        );\n    }\n}\n\nexport default Timeline;\n","import React, {Component} from 'react';\nimport './Settings.css';\n\nclass Settings extends Component {\n    render() {\n        return (\n            <header>\n                <h1>Settings page</h1>\n            </header>\n        );\n    }\n}\n\nexport default Settings;\n","import React, {Component} from 'react';\nimport Navbar from \"./Navbar\";\nimport Timeline from \"./Timeline\";\nimport Settings from \"./Settings\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Navbar/>\n                <Router>\n                    <Switch>\n                        <Route path=\"/settings\" component={Settings}/>\n                        <Route path=\"/\" component={Timeline}/>\n                    </Switch>\n                </Router>\n            </div>\n\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}